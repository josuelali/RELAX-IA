entrypoint = "index.js"
modules = ["nodejs-20:v8-20230920-bd784b9"]
hidden = [".config", "package-lock.json"]
run = "python app.py"
from flask import Flask, request, jsonify
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaFileUpload
import os
from moviepy.editor import VideoFileClip

app = Flask(__Youtube__)
DEVELOPER_KEY = AIzaSyCQ0j6RSbM-wjw-PpLCaEd2u9R0h63CrfE
YOUTUBE_UPLOAD_URL = 'https://www.googleapis.com/upload/youtube/v3/videos'

def youtube_upload(filename, title, description, keywords, privacyStatus):
    """Subir un video a YouTube."""
    youtube = build('youtube', 'v3', developerKey=AIzaSyCQ0j6RSbM
    media_file = MediaFileUpload(filename, mimetype='video/mp4', chunksize=-1, resumable=True)

    request = youtube.videos().insert(
        part='snippet,status',
        body={
            'snippet': {
                'title': title,
                'description': description,
                'tags': keywords,
            },
            'status': {
                'privacyStatus': privacyStatus
            }
        },
        media_body=media_file
    )

    response = None
    try:
        response = request.execute()
    except HttpError as e:
        print(f'An HTTP error occurred: {e}')
        # Aquí puedes manejar el error, por ejemplo, enviando un correo electrónico o escribiendo un registro.

    if response:
        print(f'Video uploaded successfully! Video ID: {response["id"]}')
        # Aquí puedes manejar el éxito, por ejemplo, actualizando una base de datos o mostrando un mensaje.

def extract_metadata(filename):
    """Extraer metadatos de un video."""
    try:
        clip = VideoFileClip(filename)
        title = os.path.splitext(os.path.basename(filename))[0] # Extraer título del nombre del archivo
        description = "Descripción automática del video" # Puedes agregar lógica para extraer la descripción
        keywords = ["palabras clave", "keywords"] # Puedes agregar lógica para extraer palabras clave
        return title, description, keywords
    except Exception as e:
        print(f'Error al extraer metadatos: {e}')
        return None, None, None

@app.route('/upload', methods=['POST'])
def upload_video():
    """Recibir una solicitud de la app Android para subir un video."""
    filename = request.form.get('filename')
    title = request.form.get('title')
    description = request.form.get('description')
    keywords = request.form.get('keywords')
    privacyStatus = request.form.get('privacyStatus')

    # Subir el video
    youtube_upload(filename, title, description, keywords, privacyStatus)

    return jsonify({'message': 'Video uploaded successfully!'})

if __name__ == '__main__':
    app.run(debug=True)
[gitHubImport]
requiredFiles = [".replit", "replit.nix", "package.json", "package-lock.json"]

[nix]
channel = "stable-23_05"

[unitTest]
language = "nodejs"

[deployment]
run = ["node", "index.js"]
deploymentTarget = "cloudrun"
ignorePorts = false

[[ports]]
localPort = 3000
externalPort = 80
npm start
npm install
ionic start MyApp blank
cd MyApp
ionic cordova platform add android
@app.route('/upload', methods=['POST'])
def upload_video():
    """Recibir una solicitud de la app Android para subir un video."""
    pip install google-api-python-client moviepy flask
    your_project/
    │
    ├── app.py Flaskgoogleapiclient.discovery
    ├── upload_script.py  # Script para subir videos a YouTube
    ├── requirements.txt  # Lista de dependencias
    └── video.mp4  # Tu archivo de video
    from flask import Flask, request, jsonify
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    from googleapiclient.http import MediaFileUpload
    import os
    from moviepy.editor import VideoFileClip

    app = Flask(__name__)

    # Configuración de la API de YouTube
    DEVELOPER_KEY=AIzaSyCQ0j6RSbM
    YOUTUBE_UPLOAD_URL = 'https://www.googleapis.com/upload/youtube/v3/videos'

    def youtube_upload(filename, title, description, keywords, privacyStatus):
        """Subir un video a YouTube."""
        youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)
        media_file = MediaFileUpload(filename, mimetype='video/mp4', chunksize=-1, resumable=True)

        request = youtube.videos().insert(
            part='snippet,status',
            body={
                'snippet': {
                    'title': title,
                    'description': description,
                    'tags': keywords,
                },
                'status': {
                    'privacyStatus': privacyStatus
                }
            },
            media_body=media_file
        )

        response = None
        try:
            response = request.execute()
        except HttpError as e:
            print(f'An HTTP error occurred: {e}')
            # Aquí puedes manejar el error, por ejemplo, enviando un correo electrónico o escribiendo un registro.

        if response:
            print(f'Video uploaded successfully! Video ID: {response["id"]}')
            # Aquí puedes manejar el éxito, por ejemplo, actualizando una base de datos o mostrando un mensaje.

    def extract_metadata(filename):
        """Extraer metadatos de un video."""
        try:
            clip = VideoFileClip(filename)
            title = os.path.splitext(os.path.basename(filename))[0] # Extraer título del nombre del archivo
            description = "Descripción automática del video" # Puedes agregar lógica para extraer la descripción
            keywords = ["palabras clave", "keywords"] # Puedes agregar lógica para extraer palabras clave
            return title, description, keywords
        except Exception as e:
            print(f'Error al extraer metadatos: {e}')
            return None, None, None

    @app.route('/upload', methods=['POST'])
    def upload_video():
        """Recibir una solicitud de la app Android para subir un video."""
        filename = request.form.get('filename')
        title = request.form.get('title')
        description = request.form.get('description')
        keywords = request.form.get('keywords')
        privacyStatus = request.form.get('privacyStatus')

        # Subir el video
        youtube_upload(filename, title, description, keywords, privacyStatus)

        return jsonify({'message': 'Video uploaded successfully!'})

    if __name__ == '__main__':
        app.run(debug=True)
curl $REPLIT_DB_URL -d 'AIzaSyCQ0j6RSbM = value'
curl $REPLIT_DB_URL/AIzaSyCQ0j6RSbM
curl -XDELETE $REPLIT_DB_URL/AIzaSyCQ0j6RSbM
curl "$REPLIT_DB_URL?prefix=AIzaSyCQ0j6RSbM"
